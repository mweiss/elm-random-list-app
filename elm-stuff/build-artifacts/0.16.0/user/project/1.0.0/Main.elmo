Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var view = F2(function (address,model) {
      var displayText = function () {    var _p0 = model.name;if (_p0.ctor === "Nothing") {    return "触りなさい";} else {    return _p0._0;}}();
      return $Html.text(displayText);
   });
   var Init = function (a) {    return {ctor: "Init",_0: a};};
   var Nothing = {ctor: "Nothing"};
   var init = {ctor: "_Tuple2",_0: {name: $Maybe.Nothing,seed: $Maybe.Nothing},_1: $Effects.none};
   var Model = F2(function (a,b) {    return {name: a,seed: b};});
   var names = $Array.fromList(_U.list(["タフェー","トゥーン","ヘス","ゴ","ユ","トウ","みなみ","シリン","ペック","セシリア","トィン","ヨーキン","ジョズエ","ジュ","ゆみ","マラティーナ","カイ","あき","カ","マイケル"]));
   var update = F2(function (action,model) {
      var _p1 = action;
      if (_p1.ctor === "Nothing") {
            return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         } else {
            var a = A2($Random.generate,A2($Random.$int,0,$Array.length(names) - 1),_p1._0);
            return {ctor: "_Tuple2",_0: _U.update(model,{name: A2($Array.get,$Basics.fst(a),names),seed: $Maybe.Just($Basics.snd(a))}),_1: $Effects.none};
         }
   });
   var startTimeSeed = A2($Signal.map,
   function (_p2) {
      return function (x) {
         return Init(x);
      }($Random.initialSeed($Basics.round(_p2)));
   },
   $Time.every(1000));
   var app = $StartApp.start({init: init,view: view,update: update,inputs: _U.list([startTimeSeed])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   return _elm.Main.values = {_op: _op
                             ,startTimeSeed: startTimeSeed
                             ,app: app
                             ,names: names
                             ,main: main
                             ,Model: Model
                             ,init: init
                             ,Nothing: Nothing
                             ,Init: Init
                             ,update: update
                             ,view: view};
};